<?php
/**
 * Contrôleur d'authentification
 * 
 * @package TechCMS
 * @version 1.0.0
 */

namespace TechCMS\Controllers;

use TechCMS\Core\Controller;
use TechCMS\Core\Request;
use TechCMS\Core\Response;
use TechCMS\Core\JWT;
use TechCMS\Models\User;

class AuthController extends Controller {
    /**
     * Authentification de l'utilisateur
     */
    public function login(Request $request) {
        $data = $request->getJson();
        
        if (!isset($data['email']) || !isset($data['password'])) {
            return (new Response())
                ->setStatusCode(400)
                ->json(['message' => 'Email et mot de passe requis']);
        }

        $user = User::findByEmail($data['email']);
        if (!$user || !password_verify($data['password'], $user->password)) {
            return (new Response())
                ->setStatusCode(401)
                ->json(['message' => 'Identifiants invalides']);
        }

        // Générer les tokens
        $accessToken = JWT::generate([
            'id' => $user->id,
            'email' => $user->email,
            'role' => $user->role
        ]);

        $refreshToken = JWT::generate([
            'id' => $user->id,
            'type' => 'refresh'
        ], true);

        return (new Response())->json([
            'token' => $accessToken,
            'refreshToken' => $refreshToken,
            'user' => [
                'id' => $user->id,
                'email' => $user->email,
                'firstName' => $user->firstName,
                'lastName' => $user->lastName,
                'role' => $user->role
            ]
        ]);
    }

    /**
     * Rafraîchit le token d'accès
     */
    public function refresh(Request $request) {
        $data = $request->getJson();
        
        if (!isset($data['refreshToken'])) {
            return (new Response())
                ->setStatusCode(400)
                ->json(['message' => 'Refresh token requis']);
        }

        try {
            $payload = JWT::verify($data['refreshToken']);
            
            if (!isset($payload['type']) || $payload['type'] !== 'refresh') {
                throw new \Exception('Token invalide');
            }

            $user = User::findById($payload['id']);
            if (!$user) {
                throw new \Exception('Utilisateur non trouvé');
            }

            $accessToken = JWT::generate([
                'id' => $user->id,
                'email' => $user->email,
                'role' => $user->role
            ]);

            return (new Response())->json([
                'token' => $accessToken
            ]);
        } catch (\Exception $e) {
            return (new Response())
                ->setStatusCode(401)
                ->json(['message' => 'Refresh token invalide']);
        }
    }

    /**
     * Déconnexion de l'utilisateur
     */
    public function logout(Request $request) {
        // Pour JWT, il suffit de supprimer le token côté client
        return (new Response())->json(['message' => 'Déconnexion réussie']);
    }

    /**
     * Récupère les informations de l'utilisateur connecté
     */
    public function me(Request $request) {
        $user = User::findById($request->user['id']);
        
        if (!$user) {
            return (new Response())
                ->setStatusCode(401)
                ->json(['message' => 'Utilisateur non trouvé']);
        }

        return (new Response())->json([
            'id' => $user->id,
            'email' => $user->email,
            'firstName' => $user->firstName,
            'lastName' => $user->lastName,
            'role' => $user->role
        ]);
    }
}
